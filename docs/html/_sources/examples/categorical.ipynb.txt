{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example - Categorical Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas as gpd\n",
    "import pandas\n",
    "\n",
    "from geocube.api.core import make_geocube\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load in soil data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "ssurgo_data = gpd.read_file(\"soil_data_group.geojson\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f4225527978>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# original data\n",
    "ssurgo_data[ssurgo_data.hzdept_r==15].plot(column='sandtotal_r')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generate categories for categorical data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If your data is only a subset of all of the data, the list of categories you get will likely not be complete."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Somewhat poorly drained',\n",
       " 'Poorly drained',\n",
       " 'Well drained',\n",
       " 'Excessively drained']"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# this is only a subset of all of the classes\n",
    "ssurgo_data.drclassdcd.drop_duplicates().values.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# complete list of categories\n",
    "drclasses_complete = [\n",
    "    'Poorly drained',\n",
    "    'Somewhat poorly drained',\n",
    "    'Excessively drained',\n",
    "    'Subaqueous',\n",
    "    'Well drained',\n",
    "    'Somewhat excessively drained',\n",
    "    'Very poorly drained',\n",
    "    'Moderately well drained'\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "categorical_enums = {'drclassdcd': drclasses_complete}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convert data to grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "out_grid = make_geocube(\n",
    "    vector_data=ssurgo_data,\n",
    "    output_crs=\"+init=epsg:32615\",\n",
    "    group_by='hzdept_r',\n",
    "    resolution=(-100, 100),\n",
    "    categorical_enums=categorical_enums\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:                (drclassdcd_categories: 9, hzdept_r: 11, x: 15, y: 19)\n",
       "Coordinates:\n",
       "  * y                      (y) float64 4.597e+06 4.597e+06 ... 4.595e+06\n",
       "  * x                      (x) float64 7.004e+05 7.004e+05 ... 7.018e+05\n",
       "  * hzdept_r               (hzdept_r) float64 0.0 5.0 15.0 ... 105.0 120.0 150.0\n",
       "  * drclassdcd_categories  (drclassdcd_categories) object 'Excessively drained' ... 'nodata'\n",
       "    spatial_ref            int64 0\n",
       "Data variables:\n",
       "    drclassdcd             (hzdept_r, y, x) float64 -1.0 -1.0 -1.0 ... 7.0 7.0\n",
       "    hzdepb_r               (hzdept_r, y, x) float64 -9.999e+03 ... 180.0\n",
       "    claytotal_r            (hzdept_r, y, x) float64 -9.999e+03 ... 21.0\n",
       "    sandtotal_r            (hzdept_r, y, x) float64 -9.999e+03 ... 10.0\n",
       "    silttotal_r            (hzdept_r, y, x) float64 -9.999e+03 ... 69.0"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "out_grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.QuadMesh at 0x7f422545d438>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# mask nodata and plot\n",
    "clay_slice = out_grid.claytotal_r.sel(hzdept_r=15)\n",
    "clay_slice.where(clay_slice!=out_grid.claytotal_r.attrs['_FillValue']).plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dealing with categorical data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Because the data needs to be numerical for conversion from vector to raster, the code displays the categories as numbers. To convert back to strings, you will need to use the categories provided to convert back."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.QuadMesh at 0x7f422538ecc0>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "drclassdcd_slice = out_grid.drclassdcd.sel(hzdept_r=15)\n",
    "drclassdcd_slice.where(drclassdcd_slice!=out_grid.drclassdcd.attrs['_FillValue']).plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "drclassdcd_string = out_grid['drclassdcd_categories'][out_grid['drclassdcd'].astype(int)]\\\n",
    "    .drop('drclassdcd_categories')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:                (drclassdcd_categories: 9, hzdept_r: 11, x: 15, y: 19)\n",
       "Coordinates:\n",
       "  * y                      (y) float64 4.597e+06 4.597e+06 ... 4.595e+06\n",
       "  * x                      (x) float64 7.004e+05 7.004e+05 ... 7.018e+05\n",
       "  * hzdept_r               (hzdept_r) float64 0.0 5.0 15.0 ... 105.0 120.0 150.0\n",
       "  * drclassdcd_categories  (drclassdcd_categories) object 'Excessively drained' ... 'nodata'\n",
       "    spatial_ref            int64 0\n",
       "Data variables:\n",
       "    drclassdcd             (hzdept_r, y, x) object 'nodata' ... 'Well drained'\n",
       "    hzdepb_r               (hzdept_r, y, x) float64 -9.999e+03 ... 180.0\n",
       "    claytotal_r            (hzdept_r, y, x) float64 -9.999e+03 ... 21.0\n",
       "    sandtotal_r            (hzdept_r, y, x) float64 -9.999e+03 ... 10.0\n",
       "    silttotal_r            (hzdept_r, y, x) float64 -9.999e+03 ... 69.0"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "out_grid['drclassdcd'] = drclassdcd_string\n",
    "out_grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>drclassdcd</th>\n",
       "      <th>hzdepb_r</th>\n",
       "      <th>claytotal_r</th>\n",
       "      <th>sandtotal_r</th>\n",
       "      <th>silttotal_r</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hzdept_r</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">0.0</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">700350.0</th>\n",
       "      <th>4597050.0</th>\n",
       "      <td>nodata</td>\n",
       "      <td>-9999.0</td>\n",
       "      <td>-9999.0</td>\n",
       "      <td>-9999.0</td>\n",
       "      <td>-9999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4596950.0</th>\n",
       "      <td>Well drained</td>\n",
       "      <td>5.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4596850.0</th>\n",
       "      <td>Well drained</td>\n",
       "      <td>5.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4596750.0</th>\n",
       "      <td>Well drained</td>\n",
       "      <td>5.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4596650.0</th>\n",
       "      <td>Well drained</td>\n",
       "      <td>5.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               drclassdcd  hzdepb_r  claytotal_r  sandtotal_r  \\\n",
       "hzdept_r x        y                                                             \n",
       "0.0      700350.0 4597050.0        nodata   -9999.0      -9999.0      -9999.0   \n",
       "                  4596950.0  Well drained       5.0         26.0         38.0   \n",
       "                  4596850.0  Well drained       5.0         26.0         38.0   \n",
       "                  4596750.0  Well drained       5.0         26.0         38.0   \n",
       "                  4596650.0  Well drained       5.0         26.0         38.0   \n",
       "\n",
       "                             silttotal_r  \n",
       "hzdept_r x        y                       \n",
       "0.0      700350.0 4597050.0      -9999.0  \n",
       "                  4596950.0         36.0  \n",
       "                  4596850.0         36.0  \n",
       "                  4596750.0         36.0  \n",
       "                  4596650.0         36.0  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pdf = out_grid.drop(['spatial_ref', 'drclassdcd_categories']).to_dataframe()\n",
    "pdf.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Make sure all categories are represented\n",
    "\n",
    "To do this, convert the column type to categorical beforehand and make sure that\n",
    "you include all of the possible categories."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_dtype = pandas.api.types.CategoricalDtype(out_grid.drclassdcd_categories.values)\n",
    "pdf['drclassdcd'] = pdf['drclassdcd'].astype(cat_dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>hzdepb_r</th>\n",
       "      <th>claytotal_r</th>\n",
       "      <th>sandtotal_r</th>\n",
       "      <th>silttotal_r</th>\n",
       "      <th>drclassdcd_Excessively drained</th>\n",
       "      <th>drclassdcd_Moderately well drained</th>\n",
       "      <th>drclassdcd_Poorly drained</th>\n",
       "      <th>drclassdcd_Somewhat excessively drained</th>\n",
       "      <th>drclassdcd_Somewhat poorly drained</th>\n",
       "      <th>drclassdcd_Subaqueous</th>\n",
       "      <th>drclassdcd_Very poorly drained</th>\n",
       "      <th>drclassdcd_Well drained</th>\n",
       "      <th>drclassdcd_nodata</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hzdept_r</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">0.0</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">700350.0</th>\n",
       "      <th>4597050.0</th>\n",
       "      <td>-9999.0</td>\n",
       "      <td>-9999.0</td>\n",
       "      <td>-9999.0</td>\n",
       "      <td>-9999.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4596950.0</th>\n",
       "      <td>5.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4596850.0</th>\n",
       "      <td>5.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4596750.0</th>\n",
       "      <td>5.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4596650.0</th>\n",
       "      <td>5.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             hzdepb_r  claytotal_r  sandtotal_r  silttotal_r  \\\n",
       "hzdept_r x        y                                                            \n",
       "0.0      700350.0 4597050.0   -9999.0      -9999.0      -9999.0      -9999.0   \n",
       "                  4596950.0       5.0         26.0         38.0         36.0   \n",
       "                  4596850.0       5.0         26.0         38.0         36.0   \n",
       "                  4596750.0       5.0         26.0         38.0         36.0   \n",
       "                  4596650.0       5.0         26.0         38.0         36.0   \n",
       "\n",
       "                             drclassdcd_Excessively drained  \\\n",
       "hzdept_r x        y                                           \n",
       "0.0      700350.0 4597050.0                               0   \n",
       "                  4596950.0                               0   \n",
       "                  4596850.0                               0   \n",
       "                  4596750.0                               0   \n",
       "                  4596650.0                               0   \n",
       "\n",
       "                             drclassdcd_Moderately well drained  \\\n",
       "hzdept_r x        y                                               \n",
       "0.0      700350.0 4597050.0                                   0   \n",
       "                  4596950.0                                   0   \n",
       "                  4596850.0                                   0   \n",
       "                  4596750.0                                   0   \n",
       "                  4596650.0                                   0   \n",
       "\n",
       "                             drclassdcd_Poorly drained  \\\n",
       "hzdept_r x        y                                      \n",
       "0.0      700350.0 4597050.0                          0   \n",
       "                  4596950.0                          0   \n",
       "                  4596850.0                          0   \n",
       "                  4596750.0                          0   \n",
       "                  4596650.0                          0   \n",
       "\n",
       "                             drclassdcd_Somewhat excessively drained  \\\n",
       "hzdept_r x        y                                                    \n",
       "0.0      700350.0 4597050.0                                        0   \n",
       "                  4596950.0                                        0   \n",
       "                  4596850.0                                        0   \n",
       "                  4596750.0                                        0   \n",
       "                  4596650.0                                        0   \n",
       "\n",
       "                             drclassdcd_Somewhat poorly drained  \\\n",
       "hzdept_r x        y                                               \n",
       "0.0      700350.0 4597050.0                                   0   \n",
       "                  4596950.0                                   0   \n",
       "                  4596850.0                                   0   \n",
       "                  4596750.0                                   0   \n",
       "                  4596650.0                                   0   \n",
       "\n",
       "                             drclassdcd_Subaqueous  \\\n",
       "hzdept_r x        y                                  \n",
       "0.0      700350.0 4597050.0                      0   \n",
       "                  4596950.0                      0   \n",
       "                  4596850.0                      0   \n",
       "                  4596750.0                      0   \n",
       "                  4596650.0                      0   \n",
       "\n",
       "                             drclassdcd_Very poorly drained  \\\n",
       "hzdept_r x        y                                           \n",
       "0.0      700350.0 4597050.0                               0   \n",
       "                  4596950.0                               0   \n",
       "                  4596850.0                               0   \n",
       "                  4596750.0                               0   \n",
       "                  4596650.0                               0   \n",
       "\n",
       "                             drclassdcd_Well drained  drclassdcd_nodata  \n",
       "hzdept_r x        y                                                      \n",
       "0.0      700350.0 4597050.0                        0                  1  \n",
       "                  4596950.0                        1                  0  \n",
       "                  4596850.0                        1                  0  \n",
       "                  4596750.0                        1                  0  \n",
       "                  4596650.0                        1                  0  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training_df = pandas.get_dummies(pdf, columns=['drclassdcd'])\n",
    "training_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['hzdepb_r', 'claytotal_r', 'sandtotal_r', 'silttotal_r',\n",
       "       'drclassdcd_Excessively drained', 'drclassdcd_Moderately well drained',\n",
       "       'drclassdcd_Poorly drained', 'drclassdcd_Somewhat excessively drained',\n",
       "       'drclassdcd_Somewhat poorly drained', 'drclassdcd_Subaqueous',\n",
       "       'drclassdcd_Very poorly drained', 'drclassdcd_Well drained',\n",
       "       'drclassdcd_nodata'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training_df.columns"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
