{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example - Mapping Grid Data to Vector Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install regionmask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/snowal/miniconda/envs/geocube/lib/python3.6/site-packages/dask/config.py:168: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.\n",
      "  data = yaml.load(f.read()) or {}\n",
      "/home/snowal/miniconda/envs/geocube/lib/python3.6/site-packages/distributed/config.py:20: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.\n",
      "  defaults = yaml.load(f)\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "\n",
    "import geopandas as gpd\n",
    "import regionmask\n",
    "\n",
    "from geocube.api.core import make_geocube\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "ssurgo_data = gpd.read_file(\"soil_data_group.geojson\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cokey</th>\n",
       "      <th>mukey</th>\n",
       "      <th>drclassdcd</th>\n",
       "      <th>hzdept_r</th>\n",
       "      <th>polygon</th>\n",
       "      <th>chkey</th>\n",
       "      <th>hzdepb_r</th>\n",
       "      <th>claytotal_</th>\n",
       "      <th>sandtotal_</th>\n",
       "      <th>silttotal_</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12577452</td>\n",
       "      <td>271425</td>\n",
       "      <td>Somewhat poorly drained</td>\n",
       "      <td>0.0</td>\n",
       "      <td>POLYGON ((-90.59734968306211 41.4925450540834,...</td>\n",
       "      <td>100034090</td>\n",
       "      <td>5.0</td>\n",
       "      <td>23.067675</td>\n",
       "      <td>9.978338</td>\n",
       "      <td>66.953987</td>\n",
       "      <td>POLYGON ((-90.59734968306211 41.4925450540834,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12577452</td>\n",
       "      <td>271425</td>\n",
       "      <td>Somewhat poorly drained</td>\n",
       "      <td>5.0</td>\n",
       "      <td>POLYGON ((-90.59734968306211 41.4925450540834,...</td>\n",
       "      <td>100034090</td>\n",
       "      <td>15.0</td>\n",
       "      <td>23.067675</td>\n",
       "      <td>9.978338</td>\n",
       "      <td>66.953987</td>\n",
       "      <td>POLYGON ((-90.59734968306211 41.4925450540834,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12577452</td>\n",
       "      <td>271425</td>\n",
       "      <td>Somewhat poorly drained</td>\n",
       "      <td>15.0</td>\n",
       "      <td>POLYGON ((-90.59734968306211 41.4925450540834,...</td>\n",
       "      <td>100034091</td>\n",
       "      <td>30.0</td>\n",
       "      <td>23.067675</td>\n",
       "      <td>9.978338</td>\n",
       "      <td>66.953987</td>\n",
       "      <td>POLYGON ((-90.59734968306211 41.4925450540834,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12577452</td>\n",
       "      <td>271425</td>\n",
       "      <td>Somewhat poorly drained</td>\n",
       "      <td>30.0</td>\n",
       "      <td>POLYGON ((-90.59734968306211 41.4925450540834,...</td>\n",
       "      <td>100034092</td>\n",
       "      <td>45.0</td>\n",
       "      <td>23.067675</td>\n",
       "      <td>9.978338</td>\n",
       "      <td>66.953987</td>\n",
       "      <td>POLYGON ((-90.59734968306211 41.4925450540834,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12577452</td>\n",
       "      <td>271425</td>\n",
       "      <td>Somewhat poorly drained</td>\n",
       "      <td>45.0</td>\n",
       "      <td>POLYGON ((-90.59734968306211 41.4925450540834,...</td>\n",
       "      <td>100034093</td>\n",
       "      <td>60.0</td>\n",
       "      <td>23.231643</td>\n",
       "      <td>9.961941</td>\n",
       "      <td>66.806416</td>\n",
       "      <td>POLYGON ((-90.59734968306211 41.4925450540834,...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      cokey   mukey               drclassdcd  hzdept_r  \\\n",
       "0  12577452  271425  Somewhat poorly drained       0.0   \n",
       "1  12577452  271425  Somewhat poorly drained       5.0   \n",
       "2  12577452  271425  Somewhat poorly drained      15.0   \n",
       "3  12577452  271425  Somewhat poorly drained      30.0   \n",
       "4  12577452  271425  Somewhat poorly drained      45.0   \n",
       "\n",
       "                                             polygon      chkey  hzdepb_r  \\\n",
       "0  POLYGON ((-90.59734968306211 41.4925450540834,...  100034090       5.0   \n",
       "1  POLYGON ((-90.59734968306211 41.4925450540834,...  100034090      15.0   \n",
       "2  POLYGON ((-90.59734968306211 41.4925450540834,...  100034091      30.0   \n",
       "3  POLYGON ((-90.59734968306211 41.4925450540834,...  100034092      45.0   \n",
       "4  POLYGON ((-90.59734968306211 41.4925450540834,...  100034093      60.0   \n",
       "\n",
       "   claytotal_  sandtotal_  silttotal_  \\\n",
       "0   23.067675    9.978338   66.953987   \n",
       "1   23.067675    9.978338   66.953987   \n",
       "2   23.067675    9.978338   66.953987   \n",
       "3   23.067675    9.978338   66.953987   \n",
       "4   23.231643    9.961941   66.806416   \n",
       "\n",
       "                                            geometry  \n",
       "0  POLYGON ((-90.59734968306211 41.4925450540834,...  \n",
       "1  POLYGON ((-90.59734968306211 41.4925450540834,...  \n",
       "2  POLYGON ((-90.59734968306211 41.4925450540834,...  \n",
       "3  POLYGON ((-90.59734968306211 41.4925450540834,...  \n",
       "4  POLYGON ((-90.59734968306211 41.4925450540834,...  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ssurgo_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convert data to grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "out_grid = make_geocube(\n",
    "    vector_data=ssurgo_data,\n",
    "    group_by='hzdept_r',\n",
    "    resolution=(-0.0001, 0.0001)\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Group grid data by polygon"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create region mask based on input geometries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "numbers = range(len(ssurgo_data[ssurgo_data.hzdept_r==15].index))\n",
    "names = ssurgo_data[ssurgo_data.hzdept_r==15].mukey.values\n",
    "abbrevs = names\n",
    "soil_region_geom = ssurgo_data[ssurgo_data.hzdept_r==15].geometry.values\n",
    "soil_mask = regionmask.Regions_cls('SoilMask', numbers, names, abbrevs, soil_region_geom)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<cartopy.mpl.geoaxes.GeoAxesSubplot at 0x7fed2e0e9e48>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "soil_mask.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create grid mask on soil data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<xarray.DataArray 'region' (y: 165, x: 165)>\n",
       "array([[2., 2., 2., ..., 5., 5., 5.],\n",
       "       [2., 2., 2., ..., 5., 5., 5.],\n",
       "       [2., 2., 2., ..., 5., 5., 5.],\n",
       "       ...,\n",
       "       [2., 2., 2., ..., 6., 6., 6.],\n",
       "       [2., 2., 2., ..., 6., 6., 6.],\n",
       "       [2., 2., 2., ..., 6., 6., 6.]])\n",
       "Coordinates:\n",
       "  * y        (y) float64 41.5 41.5 41.5 41.5 41.5 ... 41.48 41.48 41.48 41.48\n",
       "  * x        (x) float64 -90.6 -90.6 -90.6 -90.6 ... -90.58 -90.58 -90.58 -90.58"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "soil_grid_mask = soil_mask.mask(out_grid.sel(hzdept_r=15), lat_name='y', lon_name='x')\n",
    "soil_grid_mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.QuadMesh at 0x7fed2dd27208>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "soil_grid_mask.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get the mean/median of each region using the masks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/snowal/miniconda/envs/geocube/lib/python3.6/site-packages/xarray/core/groupby.py:758: FutureWarning: Default reduction dimension will be changed to the grouped dimension in a future version of xarray. To silence this warning, pass dim=xarray.ALL_DIMS explicitly.\n",
      "  allow_lazy=True, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hzdept_r</th>\n",
       "      <th>spatial_ref</th>\n",
       "      <th>hzdepb_r</th>\n",
       "      <th>claytotal_</th>\n",
       "      <th>sandtotal_</th>\n",
       "      <th>silttotal_</th>\n",
       "      <th>mukey</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>region</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>23.067675</td>\n",
       "      <td>9.978338</td>\n",
       "      <td>66.953987</td>\n",
       "      <td>271425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>198692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.0</th>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>198754</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.0</th>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>271431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.0</th>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>198714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.0</th>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>198750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0</th>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>198724</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        hzdept_r  spatial_ref  hzdepb_r  claytotal_  sandtotal_  silttotal_  \\\n",
       "region                                                                        \n",
       "0.0         15.0            0      30.0   23.067675    9.978338   66.953987   \n",
       "1.0         15.0            0      30.0   23.000000    7.000000   70.000000   \n",
       "2.0         15.0            0      30.0   26.000000   38.000000   36.000000   \n",
       "3.0         15.0            0      30.0   14.000000   55.000000   31.000000   \n",
       "4.0         15.0            0      30.0    5.000000   87.000000    8.000000   \n",
       "5.0         15.0            0      30.0   12.000000   63.000000   25.000000   \n",
       "6.0         15.0            0      30.0   21.000000   10.000000   69.000000   \n",
       "\n",
       "         mukey  \n",
       "region          \n",
       "0.0     271425  \n",
       "1.0     198692  \n",
       "2.0     198754  \n",
       "3.0     271431  \n",
       "4.0     198714  \n",
       "5.0     198750  \n",
       "6.0     198724  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_mean = out_grid.sel(hzdept_r=15).groupby(soil_grid_mask).mean()\n",
    "grid_mean.coords['mukey'] = ('region', soil_mask.names)\n",
    "grid_mean.to_dataframe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/snowal/miniconda/envs/geocube/lib/python3.6/site-packages/xarray/core/groupby.py:758: FutureWarning: Default reduction dimension will be changed to the grouped dimension in a future version of xarray. To silence this warning, pass dim=xarray.ALL_DIMS explicitly.\n",
      "  allow_lazy=True, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hzdept_r</th>\n",
       "      <th>spatial_ref</th>\n",
       "      <th>hzdepb_r</th>\n",
       "      <th>claytotal_</th>\n",
       "      <th>sandtotal_</th>\n",
       "      <th>silttotal_</th>\n",
       "      <th>mukey</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>region</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>24.564966</td>\n",
       "      <td>10.120497</td>\n",
       "      <td>65.314537</td>\n",
       "      <td>271425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>198692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.0</th>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>198754</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.0</th>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>8.333333</td>\n",
       "      <td>74.666667</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>271431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.0</th>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>7.800000</td>\n",
       "      <td>86.466667</td>\n",
       "      <td>5.733333</td>\n",
       "      <td>198714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.0</th>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>198750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0</th>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>198724</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        hzdept_r  spatial_ref  hzdepb_r  claytotal_  sandtotal_  silttotal_  \\\n",
       "region                                                                        \n",
       "0.0         75.0            0      90.0   24.564966   10.120497   65.314537   \n",
       "1.0         75.0            0      90.0   23.000000    7.000000   70.000000   \n",
       "2.0         75.0            0      90.0   26.000000   38.000000   36.000000   \n",
       "3.0         75.0            0      90.0    8.333333   74.666667   17.000000   \n",
       "4.0         75.0            0      90.0    7.800000   86.466667    5.733333   \n",
       "5.0         75.0            0      90.0   12.000000   63.000000   25.000000   \n",
       "6.0         75.0            0      90.0   21.000000   10.000000   69.000000   \n",
       "\n",
       "         mukey  \n",
       "region          \n",
       "0.0     271425  \n",
       "1.0     198692  \n",
       "2.0     198754  \n",
       "3.0     271431  \n",
       "4.0     198714  \n",
       "5.0     198750  \n",
       "6.0     198724  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_median = out_grid.sel(hzdept_r=75).groupby(soil_grid_mask).median()\n",
    "grid_median.coords['mukey'] = ('region', soil_mask.names)\n",
    "grid_median.to_dataframe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
